--Hello! if your here it means you used some sort of HTTP spy (im guessing)
--the obfuscation was not supposed to hide the source in anyway, it was just there to stop my friend changing the name on the notifications :pray:
--silent aim was 'borrow' and get player function was 'borrowed' and modified



if getgenv().dps_settings == nil then
  getgenv().dps_settings = {
    ["toggle_silent"] = Enum.KeyCode.V,
    ["toggle_headshot_only"] = Enum.KeyCode.O,
    ["toggle_esp"] = Enum.KeyCode.P,
    ["trash_talk"] = Enum.KeyCode.T,
    ["toggle_full_blatant"] = Enum.KeyCode.L,
    ["toggle_rage_bot"] = Enum.KeyCode.N,
    ["toggle_rapid_fire"] = Enum.KeyCode.I,
    ["toggle_autoclick"] = Enum.KeyCode.B,

    ["go_invisible"] = Enum.KeyCode.X,
    ["go_visible"] = Enum.KeyCode.Z,

    ["normal_headshot_chance"] = 4, -- eg 3 means 1 in 3 chance
    
    ["RGB_fists"] = false,
    ["RGB_esp"] = false,
    
    ["randomization_strength"] = 42, -- 0-100 only - less random = more blatant

    ["toggle_fly"] = Enum.KeyCode.K,
    ["default_fly_speed"] = 100,
    ["fast_fly_speed"] = 250, -- when holding down shift


  }
end

getgenv().dps_loaded = false




local IAMDPS = true


local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/Jxereas/UI-Libraries/main/notification_gui_library.lua", true))()

local replicated_storage = game.GetService(game, "ReplicatedStorage")
local players = game.GetService(game, "Players")

local camera = workspace.CurrentCamera
local utility = require(replicated_storage.Modules.Utility)

local UserInputService = game:GetService("UserInputService")
local holdingt = false
local holding_shift = false
local grens = false
local esp_toggle = true
local headshot_only = false
local togglwoggle = true
local full_blatant = false
local rage_bot = false
local rage_bot_target = ""
local rapid_fire = false
local auto_click = false
local trash_talk = {"quit the game", "get better", "lock in bro", "try harder next time", "my nan has better aim", "your buns", "your my son", "doggie", "trash", "go aim train kid", "cry more", "wa wa wa wa", "yawn", "your just a skill issue", "boo hoo", "get better"}

local function send_msg(msg)
  game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync(msg)
end

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

local flying = false
local flySpeed = getgenv().dps_settings["default_fly_speed"]
local originalGravity = workspace.Gravity




local function fly()
    while flying do
      pcall(function()
      
        local MoveDirection = Vector3.new()
        local cameraCFrame = workspace.CurrentCamera.CFrame

        MoveDirection = MoveDirection + (UserInputService:IsKeyDown(Enum.KeyCode.W) and cameraCFrame.LookVector or Vector3.new())
        MoveDirection = MoveDirection - (UserInputService:IsKeyDown(Enum.KeyCode.S) and cameraCFrame.LookVector or Vector3.new())
        MoveDirection = MoveDirection - (UserInputService:IsKeyDown(Enum.KeyCode.A) and cameraCFrame.RightVector or Vector3.new())
        MoveDirection = MoveDirection + (UserInputService:IsKeyDown(Enum.KeyCode.D) and cameraCFrame.RightVector or Vector3.new())
        MoveDirection = MoveDirection + (UserInputService:IsKeyDown(Enum.KeyCode.Space) and Vector3.new(0, 1, 0) or Vector3.new())


        if game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
          if MoveDirection.Magnitude > 0 then
            if holding_shift == true then
              MoveDirection = MoveDirection.Unit * getgenv().dps_settings["fast_fly_speed"]
            else
              MoveDirection = MoveDirection.Unit * flySpeed
            end
            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Velocity = MoveDirection * 0.5
          else
            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Velocity = MoveDirection * 0.5
          end
      end
      end)


      RunService.RenderStepped:Wait() 
    end
end


local function go_invis()
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://90094153163920"
    getgenv().dps_invis = LocalPlayer.Character.Humanoid:LoadAnimation(animation)
    getgenv().dps_invis.Looped = true
    getgenv().dps_invis.Priority = Enum.AnimationPriority.Action4
    getgenv().dps_invis:Play()
	getgenv().dps_invis:AdjustSpeed(50)
end



local function go_vis()
  getgenv().dps_invis:Stop()
end

local function notify(head, desc, time, type)
  local time_ = time or 10
  local type_ = type or "default"
  task.spawn(function()
		local notif = Notification.new("success", "Success", "Success body message.")
		notif:changeHeading(head) -- Args(<string> NewHeading)
		notif:changeBody(desc) -- Args(<string> NewBody)
		notif:deleteTimeout(time_) -- Args(<number> DeleteWaitTime)
  end)
end

local function addhighlight(part)
  pcall(function()
    local highlight = Instance.new("Highlight")
    highlight.Adornee = part
    highlight.FillColor = Color3.fromRGB(255, 0, 0)
    highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
    highlight.FillTransparency = 0.4
    highlight.OutlineTransparency = 0.2
    highlight.Name = "dpsthug"
    highlight.Parent = part
  end)
end







notify("dps thugness", "attempting to load...", 5)

task.spawn(function()
  task.wait(5)
  if getgenv().dps_loaded == false then
    notify("dps thugness", "taking longer to load then normal", 5)
  end
  task.wait(12)
  if getgenv().dps_loaded == false then
    notify("dps thugness", "script may be broken or lagging", 5)
  end
end)


local originalValues = {}
local targetKeys = {
    ShootCooldown = true,
    ShootSpread   = true,
    ShootRecoil   = true
}
local function scanTable(t, visited, modify)
    visited = visited or {}
    if visited[t] then return end
    visited[t] = true
    for k, v in pairs(t) do
        if type(k) == "string" and targetKeys[k] then
            if modify then
                if originalValues[t] == nil then originalValues[t] = {} end
                if originalValues[t][k] == nil then
                    originalValues[t][k] = v -- store original only once
                end
                print("Found:", k, "->", tostring(v), " (setting to 0)")
                t[k] = 0.03
            end
        end
        if type(v) == "table" then
            scanTable(v, visited, modify)
        end
    end
end

local function disableValues()
    originalValues = {}
    for _, v in pairs(debug.getregistry()) do
        if type(v) == "table" then
            scanTable(v, {}, true)
        end
    end
end

local function restoreValues()
	if originalValues == {} then
		return
	end
    for t, kv in pairs(originalValues) do
        for k, v in pairs(kv) do
            print("Restoring:", k, "to", tostring(v))
            t[k] = v
        end
    end
    originalValues = {}
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
  if gameProcessed then return end
  if input.KeyCode == Enum.KeyCode.LeftControl or input.KeyCode == Enum.KeyCode.RightControl then
    holdingt = true
  end
  if input.KeyCode == Enum.KeyCode.LeftShift then
    holding_shift = true
  end
  if input.KeyCode == Enum.KeyCode.Four then
    grens = true
    notify("dps thugness", "grenade detected", 1)
  elseif input.KeyCode == Enum.KeyCode.One or input.KeyCode == Enum.KeyCode.Two or input.KeyCode == Enum.KeyCode.Three then
    grens = false
  end

  if input.KeyCode == getgenv().dps_settings["toggle_esp"] then
    esp_toggle = not esp_toggle
    notify("dps thugness", "toggled esp: "..tostring(esp_toggle))
  end

  if input.KeyCode == getgenv().dps_settings["trash_talk"] then
    local randommsg = trash_talk[math.random(1, #trash_talk)]
    send_msg(randommsg)
  end


  if input.KeyCode == getgenv().dps_settings["toggle_autoclick"] then
    auto_click = not auto_click
    notify("dps thugness", "toggled autoclicker: "..tostring(auto_click))
  end
  if input.KeyCode == getgenv().dps_settings["toggle_headshot_only"] then
    headshot_only = not headshot_only
    notify("dps thugness", "toggled headshot only: "..tostring(headshot_only))
  end

  if input.KeyCode == getgenv().dps_settings["toggle_full_blatant"] then
    full_blatant = not full_blatant
    notify("dps thugness", "toggled full blatant: "..tostring(full_blatant))
  end
  if input.KeyCode == getgenv().dps_settings["toggle_rapid_fire"] then
    rapid_fire = not rapid_fire
    notify("dps thugness", "toggled rapid firre: "..tostring(rapid_fire))
    if rapid_fire then
      disableValues()
    else
      restoreValues()
    end
  end
  if input.KeyCode == getgenv().dps_settings["toggle_rage_bot"] then
    rage_bot = not rage_bot
    notify("dps thugness", "toggled rage bot: "..tostring(rage_bot))
    if rage_bot == true  then
      workspace.Gravity = 0
    else
      workspace.Gravity = originalGravity
      rage_bot_target = ""
    end
  end
  if input.KeyCode == getgenv().dps_settings["toggle_fly"] then

    flying = not flying
    notify("dps thugness", "toggled flight: "..tostring(flying))

    if flying then
      workspace.Gravity = 0 
      fly() 
    else
      HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
      workspace.Gravity = originalGravity
    end



    --[[
        workspace.Gravity = 0 
    HumanoidRootPart.Velocity = Vector3.new(0, 50, 0)
    task.wait(0.1)
    workspace.Gravity = originalGravity
    #]]
  end

  if input.KeyCode == getgenv().dps_settings["toggle_silent"] then
    togglwoggle = not togglwoggle
    notify("dps thugness", "toggled silent aim: "..tostring(togglwoggle))
  end

  if input.KeyCode == getgenv().dps_settings["go_invisible"] then
    go_invis()
    notify("dps thugness", "you are now INVISIBLE")
  end

  if input.KeyCode == getgenv().dps_settings["go_visible"] then
    go_vis()
    notify("dps thugness", "you are now VISIBLE")
  end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
  if input.KeyCode == Enum.KeyCode.LeftControl or input.KeyCode == Enum.KeyCode.RightControl then
    holdingt = false
  end
  if input.KeyCode == Enum.KeyCode.LeftShift then
    holding_shift = false
  end
end)

task.wait(math.random(1, 3))

getgenv().current_players = {}
getgenv().rgb_hue = 0


function makemarker(Parent, Adornee, Color, Size, Size2)
  pcall(function()
    local e = Instance.new("BillboardGui", Parent)
    e.Name = "PP"
    e.Adornee = Adornee
    e.Size = UDim2.new(Size, Size2, Size, Size2)
    e.AlwaysOnTop = true

    local a = Instance.new("Frame", e)
    a.Size = UDim2.new(1, 0, 1, 0)

    a.Transparency = 0
    a.BackgroundTransparency = 0

    a.BackgroundColor3 = Color
    local g = Instance.new("UICorner", a)
    g.CornerRadius = UDim.new(1, 1)
  end)
end

local function esp_tt()
	pcall(function()
		task.spawn(function()
			for _, player in getgenv().current_players do
				task.spawn(function()
          pcall(function()
          
            if not player:FindFirstChild("dpsthug") and esp_toggle == true then
              addhighlight(player)
              for i,v in pairs(player:GetDescendants()) do
                if v.Name == "HumanoidRootPart" then
                  if IAMDPS == true and  player.Name ~= LocalPlayer.Name then
                    makemarker(v, v, Color3.fromRGB(255, 0, 0), 1, 0)
                  end
                  break
                end
              end
            end

            if player:FindFirstChild("dpsthug") then
              if esp_toggle == false then
                player:FindFirstChild("dpsthug"):Destroy()
                for i,v in pairs(player:GetDescendants()) do
                  if v.Name == "HumanoidRootPart" then
                    if v:FindFirstChild("PP") then
                      v:FindFirstChild("PP"):Destroy()
                    end
                    break
                  end
                end
              elseif getgenv().dps_settings["RGB_esp"] == true then
                player:FindFirstChild("dpsthug").FillColor = Color3.fromHSV(getgenv().rgb_hue, 1, 1)
              end
            end
          end)
				end)

			end
		end)
	end)
end


task.spawn(function()
  while task.wait(0.1) do
    pcall(function()
      esp_tt()
    end)
  end
end)

task.spawn(function()
  while task.wait(0.5) do
    getgenv().rgb_hue = getgenv().rgb_hue + 0.05
    if getgenv().rgb_hue > 1 then
      getgenv().rgb_hue = 0
    end
    local color = Color3.fromHSV(getgenv().rgb_hue, 1, 1)
    if getgenv().dps_settings["RGB_fists"] == true then
      task.spawn(function()
        for i, v in pairs(game:GetService("Workspace").ViewModels.FirstPerson:GetDescendants()) do
          if v:IsA("BasePart") then
            task.spawn(function()
              v.Material = Enum.Material.ForceField
              v.Transparency = 0.25
              v.Color = color
            end)
          end
        end
      end)
    end
  end
end)

task.spawn(function()
  while task.wait() do
    task.spawn(function()
      _G.entities = {}
      for _, child in workspace.GetChildren(workspace) do
        task.spawn(function()
          if child.FindFirstChildOfClass(child, "Humanoid") then
            local hum = child.FindFirstChildOfClass(child, "Humanoid")
            if hum.Health > 0 and child:FindFirstChild("HumanoidRootPart") then
              table.insert(_G.entities, child)
            end
          elseif child.Name == "HurtEffect" then
            for _, hurt_player in child.GetChildren(child) do
              if (hurt_player.ClassName ~= "Highlight") and hurt_player:FindFirstChild("HumanoidRootPart") then
                table.insert(_G.entities, hurt_player)
              end
            end
          end
        end)
      end
      task.wait()
      getgenv().current_players = _G.entities
    end)
  end
end)


local get_closest_player = function()
  local closest, closest_distance = nil, math.huge
  local character = players.LocalPlayer.Character

  if (character == nil) then
    return
  end

  for _, player in getgenv().current_players do
    if (player == players.LocalPlayer) then
      continue
    end

    if (not player:FindFirstChild("HumanoidRootPart")) or player:FindFirstChild("Head").Transparency > 0.1 then
      continue
    end

    local position, on_screen = camera.WorldToViewportPoint(camera, player.HumanoidRootPart.Position)

    if (on_screen == false) then
      continue
    end

    local center = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    local distance = (center - Vector2.new(position.X, position.Y)).Magnitude

    if (distance > closest_distance) then
      continue
    end

    closest = player
    closest_distance = distance
  end
  return closest
end

getgenv().aimpart = "HumanoidRootPart"
local random_strength = getgenv().dps_settings["randomization_strength"]

local old = utility.Raycast
utility.Raycast = function(...)
  local arguments = {...}

  if (#arguments > 0 and arguments[4] == 999) and togglwoggle == true then
    local success, closest = pcall(get_closest_player)
    --local closest = get_closest_player()

    rand_str = random_strength
    if full_blatant == true then
        rand_str = 2
    end
    if (closest) and success then
      if holdingt == true or grens == true or (math.random(1,5) == 1 and headshot_only == false) then
        arguments[3] = arguments[3]
      else 
        arguments[3] = closest[getgenv().aimpart].Position + Vector3.new(math.random(-rand_str, rand_str) / 100, math.random(-5, 5) / 10, math.random(-random_strength, random_strength) / 100)
      end
    end
  end
  return old(table.unpack(arguments))
end


notify("dps thugness", "please only switch to grenades using number keys", 20, "option")
notify("dps thugness", "use the keybinds you set in the script", 20, "option")


local namesString = loadstring(game:HttpGet("https://raw.githubusercontent.com/skidsinc/rivals/refs/heads/main/ranked_cheaters", true))()


local namesList = {}
for name in namesString:gmatch("[^\r\n]+") do
    table.insert(namesList, name)
end


local function checkPlayer(player)
    if table.find(namesList, player.Name) then
        print(player.Name .. " found!")
        notify("dps thugness (CHEATER)", player.Name.." has been flagged by dps as a cheater", 5)
    end
end

for _, player in ipairs(Players:GetPlayers()) do
    checkPlayer(player)
end
Players.PlayerAdded:Connect(checkPlayer)


task.spawn(function()
  pcall(function()
    local function getallthreads()
      local threads = {}

        for _, item in getreg() do
            if type(item) == 'thread' then
                table.insert(threads, item)
            end
        end

        return threads
    end

    local BadCallers = {
        "MiscController",
        "CameraSecurity",
        "ClientFighter",
    }

    local LogBlock = function(Source)
        warn("Detection attempt from", Source, "blocked!")
    end

    local LogHook = function(Function, Source)
        warn("Hooked detection function", Function, "from", Source)
    end

    local LogService = game:GetService("LogService")

    local function ScanAC()


        for _, thread in next, getallthreads() do
            local ThreadFunction = debug.info(thread, 1, "f")

            if ThreadFunction and islclosure(ThreadFunction) and (not isexecutorclosure(ThreadFunction)) then
                local Constants = debug.getconstants(ThreadFunction)

                if table.find(Constants, "FireServer") and table.find(Constants, "random") and table.find(Constants, "utf8") then
                    warn("Killed detection thread", thread, "@", debug.info(thread, 1, "s"))
                    coroutine.close(thread)
                end
            end
        end
    end

    ScanAC()

    LogService.MessageOut:Connect(function(Message, Type)
        if Type == Enum.MessageType.MessageOutput then
            if Message:find("loaded") then
                ScanAC()
            end
        end
    end)

    local OldNamecall
    OldNamecall = hookmetamethod(game, "__namecall", function(...)
        local Args = { ... }
        local Self = table.remove(Args, 1)

        if getnamecallmethod() == "FireServer" and typeof(Self) == "Instance" and Self.ClassName == "RemoteEvent" then

            if Self.Name == "UseItem" then
                local CallingScript = getcallingscript()

                if table.find(BadCallers, CallingScript.Name) then
                    LogBlock(CallingScript.Name)
                    return wait(9e9)
                end

            end
        end

        return OldNamecall(...)
    end)
  
  end)

end)

getgenv().dps_loaded = true

local camera = game.Workspace.CurrentCamera



local angle = 1

task.spawn(function()
  while RunService.Heartbeat:Wait() do
      task.spawn(function()
        pcall(function()
          if auto_click == true then
            mouse1click()
          end
        end)
      end)
      task.spawn(function()
          pcall(function()
              if rage_bot == true then
                  flying = false
                  if rage_bot_target == "" then
                      rage_bot_target = get_closest_player()
                  end
                  if (not rage_bot_target) or not (rage_bot_target:FindFirstChild("HumanoidRootPart")) then
                      rage_bot = false
                      notify("dps thugness", "toggled rage bot false - invalid target")
                      workspace.Gravity = originalGravity
                      rage_bot_target = ""
                  else
                      local targetRoot = rage_bot_target:FindFirstChild("HumanoidRootPart")
                      local radius = math.random(2, 5)
                      angle = angle + math.rad(10)
                      if angle >= math.pi * 2 then
                          angle = 0
                      end

                      local orbitX = math.cos(angle) * radius
                      local orbitZ = math.sin(angle) * radius
                      local orbitY = math.random(1, 4)

                      game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame =
                          targetRoot.CFrame * CFrame.new(orbitX, orbitY, orbitZ)

                      local alpha = 1

                      camera.CFrame = camera.CFrame:Lerp(
                          CFrame.new(camera.CFrame.Position, targetRoot.Position),
                          alpha
                      )

                      game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Velocity =
                          Vector3.new(math.random(-10,10), math.random(10,20), math.random(-10,10))
                  end
              end
          end)
      end)
  end
end)

while task.wait(0.1) do
  if math.random(1, getgenv().dps_settings["normal_headshot_chance"]) == 1 or headshot_only == true or full_blatant == true then
    getgenv().aimpart = "Head"
  else
    local tug = math.random(1,3)
    if tug == 1 then
      getgenv().aimpart = "HumanoidRootPart"
    elseif tug == 2 then
      getgenv().aimpart = "UpperTorso"
    else
      getgenv().aimpart = "LowerTorso"
    end
  end
end



